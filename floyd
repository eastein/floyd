#!/usr/bin/env python

import sys
import mediorc
import mediorc_dns
import time
import optparse
import zmqsub

class FloydBot(mediorc.IRC) :
	def __init__(self, server, nick, chan, location_name, ignore_nicks, zmqpub) :
		self.location_name = location_name
		self.ignore_nicks = ignore_nicks
		self.peeps = {}
		self.people = list()
		self.who_list_store = []
		self.rc = mediorc_dns.ResolverCacher()

		self.zmqpub = zmqpub
		self.transmission = None
		self.transmitted = time.time()

		mediorc.IRC.__init__(self, server, nick, chan)

	def hm_set(self, hm) :
		self.peeps[self.hm2nick(hm)] = hm

	def nick_out(self, nick) :
		if nick in self.peeps :
			del self.peeps[nick]

	def hm2nick(self, hm) :
		return hm.split('!', 1)[0]

	def hm2host(self, hm) :
		return hm.split('@', 1)[1]

	def matches(self, nick, myhost) :
		host = self.hm2host(self.peeps[nick])
		if host == myhost :
			return True

		for ip in self.rc.all_ips(host) + [host] :
			if ip in myhost :
				return True
		for ip in self.rc.all_ips(myhost) + [myhost] :
			if ip in host :
				return True
		return False
	
	def hm_out(self, hm) :
		self.nick_out(self.hm2nick(hm))

	def nick_change(self, oldhm, nick) :
		oldnick, oldhost = oldhm.split('!', 1)
		hm = nick + '!' + oldhost
		del self.peeps[oldnick]
		self.hm_set(hm)

	def determine_people(self) :
		myhost = self.hm2host(self.peeps[self._nick])
		self.people = [nick for nick in self.peeps.keys() if nick != self._nick and self.matches(nick, myhost) and nick not in self.ignore_nicks]
		self.broadcast_people()

	def broadcast_people(self) :
		if self.zmqpub :
			if time.time() > self.transmitted + 5.0 or self.people != self.transmission :
				self.transmission = list(self.people)
				self.transmitted = time.time()
				transmit_api = {'users_present' : self.transmission}
				print time.ctime() + ' transmitting %s' % transmit_api
				self.zmqpub.send(transmit_api)
			
	def do_work(self) :
		self.broadcast_people()

	def on_pubmsg(self, c, e) :
		chan = e.target()
		txt = e.arguments()[0]

		if txt in ('!people', '!page') :
			if not self.people :
				if txt == '!people' :
					self.connection.privmsg(chan, "I don't see anyone connected from %s." % self.location_name)
			else :
				noun = 'people'
				if len(self.people) == 1 :
					noun = 'person'
				self.connection.privmsg(chan, "I see %d %s connected from %s: %s" % (len(self.people), noun, self.location_name, ', '.join(self.people)))

	def on_join(self, c, e) :
		self.initialize_pinger()

		hm = e.source()
		nick = self.hm2nick(hm)
		if self._nick == nick : # todo case, for pretty much all == instances
			self.connection.who(e.target())
		
		self.hm_set(hm)
		self.determine_people()

	def on_kick(self, c, e) :
		self.nick_out(e.arguments()[0])
		self.determine_people()

	def on_part(self, c, e) :
		self.hm_out(e.source())
		self.determine_people()

	def on_quit(self, c, e) :
		self.hm_out(e.source())
		self.determine_people()

	def on_nick(self, c, e) :
		self.nick_change(e.source(), e.target())
		self.determine_people()

	def on_whoreply(self, c, e) :
		chan, ident, host, server, nick, flag, name = e.arguments()
		hm = nick + '!' + ident + '@' + host

		self.hm_set(hm)

	def on_endofwho(self, c ,e) :
		self.determine_people()

class FloydThread(mediorc.IRCThread) :
	def __init__(self, server, nick, chan, location_name, ignore_nicks, zmq_url) :
		zmqpub = None
		if zmq_url :
			zmqpub = zmqsub.JSONZMQPub(zmq_url)
		self.bot_create = lambda: FloydBot(server, nick, chan, location_name, ignore_nicks, zmqpub)
		mediorc.IRCThread.__init__(self)

if __name__ == '__main__' :
	parser = optparse.OptionParser()
	parser.add_option('-l', '--location-name', dest='name', help="the name of the location being monitored.")
	parser.add_option('-i', '--ignore-nicks', dest='ignore', help="ignore these nicks (comma separated, no whitespace).")
	parser.add_option('-u', '--zmq-url', dest='zmq_url', help="zmq url to bind on to transmit presence information.")

	(options, args) = parser.parse_args()

	if options.ignore :
		ignore = options.ignore.split(',')
	else :
		ignore = []

	if options.name :
		name = options.name
	else :
		name = "the monitored location"

	if options.zmq_url :
		zmq_url = options.zmq_url
	else :
		zmq_url = None

	try :
		s = FloydThread(args[0], args[1], args[2], name, ignore, zmq_url=zmq_url)
	except IndexError :
		print 'usage: floyd [-u|--zmq-url url] [--location-name|-l "location name"] [-i|--ignore-nicks nicks,to,ignore] server nick channel'
		sys.exit(1)
	
	# threading,? NOPE
	s.run()
